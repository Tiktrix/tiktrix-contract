/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface VestingWalletFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createVestingWalletTest"
      | "deployer"
      | "getImplementation"
      | "getVestingWalletDetails"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeVestingWalletTest"
      | "vestingImplementation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImplementationUpgraded"
      | "OwnershipTransferred"
      | "VestingWalletCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createVestingWalletTest",
    values: [string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingWalletDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVestingWalletTest",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createVestingWalletTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingWalletDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVestingWalletTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingImplementation",
    data: BytesLike
  ): Result;
}

export namespace ImplementationUpgradedEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingWalletCreatedEvent {
  export type InputTuple = [
    vestingWallet: AddressLike,
    deployer: AddressLike,
    token: AddressLike,
    startTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    vestingWallet: string,
    deployer: string,
    token: string,
    startTimestamp: bigint
  ];
  export interface OutputObject {
    vestingWallet: string;
    deployer: string;
    token: string;
    startTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VestingWalletFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VestingWalletFactory;
  waitForDeployment(): Promise<this>;

  interface: VestingWalletFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVestingWalletTest: TypedContractMethod<
    [
      contractURI: string,
      beneficiary: AddressLike,
      tokenAddress: AddressLike,
      startTimestamp: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deployer: TypedContractMethod<[], [string], "view">;

  getImplementation: TypedContractMethod<[], [string], "view">;

  getVestingWalletDetails: TypedContractMethod<
    [vestingWallet: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        beneficiary: string;
        token: string;
        start: bigint;
        end: bigint;
        released: bigint;
        releasable: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeVestingWalletTest: TypedContractMethod<
    [vestingWallet: AddressLike, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  vestingImplementation: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVestingWalletTest"
  ): TypedContractMethod<
    [
      contractURI: string,
      beneficiary: AddressLike,
      tokenAddress: AddressLike,
      startTimestamp: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVestingWalletDetails"
  ): TypedContractMethod<
    [vestingWallet: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        beneficiary: string;
        token: string;
        start: bigint;
        end: bigint;
        released: bigint;
        releasable: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeVestingWalletTest"
  ): TypedContractMethod<
    [vestingWallet: AddressLike, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vestingImplementation"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ImplementationUpgraded"
  ): TypedContractEvent<
    ImplementationUpgradedEvent.InputTuple,
    ImplementationUpgradedEvent.OutputTuple,
    ImplementationUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VestingWalletCreated"
  ): TypedContractEvent<
    VestingWalletCreatedEvent.InputTuple,
    VestingWalletCreatedEvent.OutputTuple,
    VestingWalletCreatedEvent.OutputObject
  >;

  filters: {
    "ImplementationUpgraded(address,address)": TypedContractEvent<
      ImplementationUpgradedEvent.InputTuple,
      ImplementationUpgradedEvent.OutputTuple,
      ImplementationUpgradedEvent.OutputObject
    >;
    ImplementationUpgraded: TypedContractEvent<
      ImplementationUpgradedEvent.InputTuple,
      ImplementationUpgradedEvent.OutputTuple,
      ImplementationUpgradedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VestingWalletCreated(address,address,address,uint64)": TypedContractEvent<
      VestingWalletCreatedEvent.InputTuple,
      VestingWalletCreatedEvent.OutputTuple,
      VestingWalletCreatedEvent.OutputObject
    >;
    VestingWalletCreated: TypedContractEvent<
      VestingWalletCreatedEvent.InputTuple,
      VestingWalletCreatedEvent.OutputTuple,
      VestingWalletCreatedEvent.OutputObject
    >;
  };
}
